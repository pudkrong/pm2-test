#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('pm2-test:server');
var http = require('http');
var cluster = require('cluster');
var argv = require('optimist').argv;

/**
 * Get port from environment and store in Express.
 */

if (argv.forever && cluster.isMaster) {
  var cpuCount = require('os').cpus().length;

  for (var i = 0; i < cpuCount; i++) {
    console.log('Fork worker #' + (i + 1));
    cluster.fork();
  }

  cluster.on('exit', function(worker, code, signal) {
    console.log('Woker existed with code: ' + code + ', signal: ' + signal);
    cluster.fork();
  });
} else {
  startServer();
}

function startServer() {
  console.log('startServer is called');
  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  if (cluster.worker) console.log('cluster #' + cluster.worker.id + ', is started');

  server.listen(port, "0.0.0.0");
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log('%j', addr);
    console.log('Listening on 0.0.0.0:' + bind);
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}



